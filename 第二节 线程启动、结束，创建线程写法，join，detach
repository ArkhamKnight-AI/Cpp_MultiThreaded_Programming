#include<iostream>
#include<vector>
#include<map>
#include<thread>  
using namespace std;
#if 0
class TA {
public:
	TA(int& i) : m_i(i) {
		cout << "TA()构造函数执行" << endl;
	}
	
	TA(const TA& ta) :m_i(ta.m_i) {
		cout << "TA()拷贝构造函数执行" << endl;
	}

	~TA(){
		cout << "~TA()析构函数执行" << endl;
	}

	//不带参数
	void operator()() {
		cout << "mi1的值为：" << m_i << endl;
		cout << "mi2的值为：" << m_i << endl;
		cout << "mi3的值为：" << m_i << endl;
		cout << "mi4的值为：" << m_i << endl;
		cout << "mi5的值为：" << m_i << endl;
		cout << "mi6的值为：" << m_i << endl;
	}

public:
	int& m_i;
};


//用函数创建线程
void myprint() {
	cout << "我的线程开始执行了" << endl;
	cout << "我的线程执行结束了1" << endl;
	cout << "我的线程执行结束了2" << endl;
	cout << "我的线程执行结束了3" << endl;
	cout << "我的线程执行结束了4" << endl;
	cout << "我的线程执行结束了5" << endl;
	cout << "我的线程执行结束了6" << endl;
	cout << "我的线程执行结束了7" << endl;
	cout << "我的线程执行结束了8 " << endl;
}
  
int main(void) {
	//生成myobj的线程类
	thread mytobj(myprint);

	if (mytobj.joinable()) {
		cout << "1:joinable() == ture" << endl;
	}
	else {
		cout << "1:joinable() == false" << endl;
	}
	//mytobj.join();
	mytobj.detach();


	if (mytobj.joinable()) {
		cout << "2:joinable() == ture" << endl;
	}
	else {
		cout << "2:joinable() == false" << endl;
	}

	cout << "I Love China1!" << endl;
	cout << "I Love China2!" << endl;  
	cout << "I Love China3!" << endl;
	cout << "I Love China4!" << endl;
	cout << "I Love China5!" << endl;
	cout << "I Love China6!" << endl;

	
	return 0;
}     

//用类创建线程
int main() {
	int myi = 6;
	TA ta(myi);
	thread mytobj2(ta);
	mytobj2.join();
	//mytobj2.detach();
 
	cout << "I love China!" << endl;

	return 0;
}
#endif

//用lambda表达式创建线程
int main() {
	auto mylamthread = [] {
		cout << "我的线程3开始执行了" << endl;
		cout << "我的线程3执行结束了" << endl;
	};


	thread myobj3(mylamthread);
	myobj3.join();
	cout << "I Love China1!" << endl;
	return 0;
}

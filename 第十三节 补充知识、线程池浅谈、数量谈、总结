//1.虚假唤醒
#include<iostream>
#include<thread>
#include<vector>
#include<list>
#include<string>
#include<mutex>
#include<memory>
using namespace std;

class A {
public:
	//把收到的消息(玩家命令)入到一个队列的线程
	void inMsgRecvQueue() {
		for (int i = 0; i < 100000; ++i) {
			std::unique_lock<std::mutex> sbguard1(my_mutex1); //把my_mutex1的所有权转移到sbguard1上
			cout << "inMsgRecvQueue()执行，插入一个元素：" << i << endl;
			msgRecvQueue.push_back(i);
			my_cond.notify_one(); //写入后 尝试把wait()的线程唤醒 那么outMsgRecvQueue()里面的wait()就会被唤醒
		}
		return;
	}

	bool outMsgLULProc(int& commond) {
		std::unique_lock<mutex> sbguard1(my_mutex1);
		if (!msgRecvQueue.empty()) {
			//消息不为空
			commond = msgRecvQueue.front(); //返回第一个元素 但不检查元素是否存在
			msgRecvQueue.pop_front(); //移除第一个元素 但不返回
			return true;
		}

		return false;
	}

	//把数据从消息队列中取出的线程
	void outMsgRecvQueue() {
		int commond = 0;
		while (true) {
			std::unique_lock<std::mutex> sbguard1(my_mutex1);
			my_cond.wait(sbguard1, [this] { //一个lambda表达式就是一个可调用对象(函数)
				if (!msgRecvQueue.empty()) {
					return true;
				}
				return false;
			});

			//流程能走到这里，互斥锁一定是锁着的
			//一会在写其他的
			commond = msgRecvQueue.front();
			msgRecvQueue.pop_front(); //移除第一个元素 但不返回
			cout << "outMsgRecvQueue()执行，取出一个元素：" << commond << " treadid = " << std::this_thread::get_id() << endl;
			sbguard1.unlock();
		}
	}


private:
	std::list<int> msgRecvQueue; //容器 专门用于代表玩家送来的命令
	std::mutex my_mutex1;
	std::condition_variable my_cond; //生成一个条件变量对象
};



int main() {
	A myobja;
	std::thread myOutnMsgObj1(&A::outMsgRecvQueue, &myobja); //第二个参数是引用 才能保证线程使用同一对象
	std::thread myOutnMsgObj2(&A::outMsgRecvQueue, &myobja); //第二个参数是引用 才能保证线程使用同一对象
	std::thread myInMsgObj(&A::inMsgRecvQueue, &myobja);
	myOutnMsgObj1.join();
	myOutnMsgObj2.join();
	myInMsgObj.join();
	return 0;
}



//2.atomic的进一步理解
#include<iostream>
#include<thread>
#include<vector>
#include<list>
#include<string>
#include<mutex>
#include<memory>
#include<atomic>
using namespace std;

class A {
public:
	atomic<int> atm;
	A() {
		atm = 0;
		atomic<int> atm5(atm.load());
	}

	//把收到的消息(玩家命令)入到一个队列的线程
	void inMsgRecvQueue() {
		for (int i = 0; i < 1000000; ++i) {
			atm += 1  ;
		}
	}

	//把数据从消息队列中取出的线程
	void outMsgRecvQueue() {
		while (true) {
			cout << atm << endl;
		}
	}


private:
	std::list<int> msgRecvQueue; //容器 专门用于代表玩家送来的命令
	std::mutex my_mutex1;
	std::condition_variable my_cond; //生成一个条件变量对象
};



int main() {
	A myobja;
	std::thread myOutnMsgObj(&A::outMsgRecvQueue, &myobja); //第二个参数是引用 才能保证线程使用同一对象
	std::thread myInMsgObj1(&A::inMsgRecvQueue, &myobja);
	std::thread myInMsgObj2(&A::inMsgRecvQueue, &myobja);
	myOutnMsgObj.join();
	myInMsgObj1.join();
	myInMsgObj2.join();

	return 0;
}

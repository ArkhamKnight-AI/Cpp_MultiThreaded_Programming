#include<iostream>
#include<string>
#include<thread>
#include<future>
using namespace std;

int mythread(int mypar) {
	cout << "mythread() start, threadid = " << std::this_thread::get_id() << endl;
	std::chrono::milliseconds dura(2000);
	std::this_thread::sleep_for(dura);
	return 5;
}

void mythread2(std::shared_future<int>& tmpf) {
	cout << "mythread2() start, threadid = " << std::this_thread::get_id() << endl;
	//只能get一次 多次get会报异常 因为get是一个移动语义 用shared_future解决数据共享问题
	auto result = tmpf.get();
	cout << "mythread2 result = " << result << endl;
}

int main() {
	////std::future<int> result = std::async(mythread);
	//std::future<int> result = std::async(std::launch::deferred, mythread); //没有创建子线程 在主线程中执行
	//cout << "continue..." << endl;

	////枚举类型
	//std::future_status status = result.wait_for(std::chrono::seconds(1)); //等待1s
	//if (status == std::future_status::timeout) {
	//	//超时表示线程还没执行完 如果wait_for返回的状态是超时 表示此时此刻该线程未执行完
	//	cout << "超时,线程还没执行完!" << endl;
	//	cout << result.get() << endl;
	//}
	//else if (status == std::future_status::ready) {
	//	cout << "线程成功执行完毕并返回!" << endl;
	//	cout << result.get() << endl;
	//}
	//else {
	//	cout << "线程被延迟执行!" << endl;
	//	cout << result.get() << endl;   
	//}
	cout << "main threadid = " << std::this_thread::get_id() << endl;
	std::packaged_task<int(int)> mypt(mythread);
	std::thread t1(std::ref(mypt), 1);
	t1.join();

	//std::future<int> result = mypt.get_future();
	//std::shared_future<int> result_s(std::move(result)); //必须变成右值
	//bool ifcanget = result.valid(); //判断result中是否有值
	//std::shared_future<int> result_s(result.share()); //使用future对象的share方法
	std::shared_future<int> result_s(mypt.get_future()); //直接使用mypt这个packaged_task这个类对象的get_future方法
	//ifcanget = result.valid(); 
	auto mythreadresult = result_s.get();
	mythreadresult = result_s.get(); //可以调用多次

	std::thread t2(mythread2, std::ref(result_s));
	t2.join();

	cout << "main主函数执行结束!" << endl;  
	return 0;
}




//原子操作atomic
#include<iostream>
#include<string>
#include<thread>
#include<future>
using namespace std;

//int mythread(int mypar) {
//	cout << "mythread() start, threadid = " << std::this_thread::get_id() << endl;
//	std::chrono::milliseconds dura(2000);
//	std::this_thread::sleep_for(dura);
//	return 5;
//}

void mythread2(std::shared_future<int>& tmpf) {
	cout << "mythread2() start, threadid = " << std::this_thread::get_id() << endl;
	//只能get一次 多次get会报异常 因为get是一个移动语义 用shared_future解决数据共享问题
	auto result = tmpf.get();
	cout << "mythread2 result = " << result << endl;
}

std::mutex g_mutex;
std::atomic<int> g_mycount = 0; //封装了一个类型为int的对象

//(1)使用mutex互斥量加锁
//void mythread() {
//	for (int i = 0; i < 1000000; i++) {
//		g_mutex.lock();
//		g_mycount++;
//		g_mutex.unlock();
//	}
//	return;
//}

//(2)使用std::atomic原子操作
//void mythread(){
//	for (int i = 0; i < 1000000; i++) {
//		g_mycount++;
//	}
//}

std::atomic<bool> g_ifend = false; //线程退出标记 这里是原子操作 防止读和写乱套
void mythread() {
	std::chrono::milliseconds dura(1000);
	while (g_ifend == false) {
		//系统没要求线程退出 线程可以干自己想干的事
		cout << "threadid = " << std::this_thread::get_id() << "运行中..." << endl;
		std::this_thread::sleep_for(dura);
	}
	cout << "thread id = " << std::this_thread::get_id() << "运行结束..." << endl;
}

int main() {
	cout << "main threadid = " << std::this_thread::get_id() << endl;
	std::thread mytobj1(mythread);
	std::thread mytobj2(mythread);
	std::chrono::milliseconds dura(5000);
	std::this_thread::sleep_for(dura);
	g_ifend = true; //对原子对象的写操作 让线程自行运行结束

	mytobj1.join();
	mytobj2.join();

	cout << "程序执行完毕，退出" << endl;

	cout << "两个线程执行完毕，最终的g_mycount = " << g_mycount << endl;
	cout << "main主函数执行结束!" << endl;  
	return 0;
}
